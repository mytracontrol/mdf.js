/**
 * Copyright 2024 Mytra Control S.L. All rights reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be found in the LICENSE file
 * or at https://opensource.org/licenses/MIT.
 */

import { Types } from '../../types';
import { Constructors } from './Constructors';
import { Parser } from './Parser';

const SASLMechanismsBuffer = [
  0x00, 0x53, 0x40, 0xc0, 0x15, 0x01, 0xe0, 0x12, 0x02, 0xa3, 0x05, 0x50, 0x4c, 0x41, 0x49, 0x4e,
  0x09, 0x41, 0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x4f, 0x55, 0x53,
];
const SASLMechanismsDecoded = {
  type: Types.Primitive.LIST8,
  descriptor: {
    type: Types.Primitive.SMALL_ULONG,
    descriptor: null,
    size: 2,
    width: 1,
    value: 64,
  },
  width: 20,
  size: 23,
  value: [
    {
      type: Types.Primitive.ARRAY8,
      descriptor: null,
      width: 17,
      size: 20,
      value: [
        {
          type: Types.Primitive.SYM8,
          descriptor: null,
          size: 7,
          width: 5,
          value: 'PLAIN',
        },
        {
          type: Types.Primitive.SYM8,
          descriptor: null,
          size: 11,
          width: 9,
          value: 'ANONYMOUS',
        },
      ],
    },
  ],
};
const SASLInitBuffer = [
  0x00, 0x53, 0x41, 0xd0, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x03, 0xa3, 0x05, 0x50, 0x4c,
  0x41, 0x49, 0x4e, 0xa0, 0x19, 0x00, 0x6e, 0x65, 0x74, 0x69, 0x6e, 0x2d, 0x61, 0x64, 0x6d, 0x69,
  0x6e, 0x00, 0x5a, 0x58, 0x70, 0x74, 0x65, 0x2e, 0x75, 0x66, 0x57, 0x79, 0x4c, 0x6b, 0xa1, 0x0b,
  0x31, 0x30, 0x2e, 0x31, 0x30, 0x2e, 0x32, 0x30, 0x2e, 0x34, 0x31,
];
const SASLInitDecoded = {
  type: Types.Primitive.LIST32,
  descriptor: {
    type: Types.Primitive.SMALL_ULONG,
    descriptor: null,
    size: 2,
    width: 1,
    value: 65,
  },
  width: 47,
  size: 56,
  value: [
    {
      type: Types.Primitive.SYM8,
      descriptor: null,
      size: 7,
      width: 5,
      value: 'PLAIN',
    },
    {
      type: Types.Primitive.VBIN8,
      descriptor: null,
      size: 27,
      width: 25,
      value: Buffer.from(
        new Uint8Array([
          0, 110, 101, 116, 105, 110, 45, 97, 100, 109, 105, 110, 0, 90, 88, 112, 116, 101, 46, 117,
          102, 87, 121, 76, 107,
        ])
      ),
    },
    {
      type: Types.Primitive.STR8,
      descriptor: null,
      size: 13,
      width: 11,
      value: '10.10.20.41',
    },
  ],
};
const FrameOpenBuffer = [
  0x00, 0x53, 0x10, 0xc0, 0xa1, 0x0a, 0xa1, 0x08, 0x4e, 0x65, 0x74, 0x69, 0x6e, 0x41, 0x4d, 0x51,
  0x40, 0x70, 0x00, 0x02, 0x00, 0x00, 0x60, 0xff, 0xff, 0x70, 0x00, 0x00, 0x75, 0x30, 0x40, 0x40,
  0xe0, 0x4d, 0x04, 0xa3, 0x1d, 0x73, 0x6f, 0x6c, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
  0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x6f, 0x72, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
  0x65, 0x72, 0x10, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56,
  0x45, 0x52, 0x59, 0x0b, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x2d, 0x53, 0x55, 0x42, 0x53, 0x0f,
  0x41, 0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x4f, 0x55, 0x53, 0x2d, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x40,
  0xc1, 0x34, 0x04, 0xa3, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0xa1, 0x17, 0x61, 0x70,
  0x61, 0x63, 0x68, 0x65, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x71, 0x2d, 0x61, 0x72,
  0x74, 0x65, 0x6d, 0x69, 0x73, 0xa3, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0xa1, 0x06,
  0x32, 0x2e, 0x33, 0x31, 0x2e, 0x32,
];
const FrameOpenDecoded = {
  type: Types.Primitive.LIST8,
  descriptor: {
    type: Types.Primitive.SMALL_ULONG,
    descriptor: null,
    size: 2,
    width: 1,
    value: 16,
  },
  width: 160,
  size: 163,
  value: [
    {
      type: Types.Primitive.STR8,
      descriptor: null,
      size: 10,
      width: 8,
      value: 'NetinAMQ',
    },
    {
      type: Types.Primitive.NULL,
      descriptor: null,
      size: 1,
      width: 0,
      value: null,
    },
    {
      type: Types.Primitive.UINT,
      descriptor: null,
      size: 5,
      width: 4,
      value: 131072,
    },
    {
      type: Types.Primitive.USHORT,
      descriptor: null,
      size: 3,
      width: 2,
      value: 65535,
    },
    {
      type: Types.Primitive.UINT,
      descriptor: null,
      size: 5,
      width: 4,
      value: 30000,
    },
    {
      type: Types.Primitive.NULL,
      descriptor: null,
      size: 1,
      width: 0,
      value: null,
    },
    {
      type: Types.Primitive.NULL,
      descriptor: null,
      size: 1,
      width: 0,
      value: null,
    },
    {
      type: Types.Primitive.ARRAY8,
      descriptor: null,
      width: 76,
      size: 79,
      value: [
        {
          type: Types.Primitive.SYM8,
          descriptor: null,
          size: 31,
          width: 29,
          value: 'sole-connection-for-container',
        },
        {
          type: Types.Primitive.SYM8,
          descriptor: null,
          size: 18,
          width: 16,
          value: 'DELAYED_DELIVERY',
        },
        {
          type: Types.Primitive.SYM8,
          descriptor: null,
          size: 13,
          width: 11,
          value: 'SHARED-SUBS',
        },
        {
          type: Types.Primitive.SYM8,
          descriptor: null,
          size: 17,
          width: 15,
          value: 'ANONYMOUS-RELAY',
        },
      ],
    },
    {
      type: Types.Primitive.NULL,
      descriptor: null,
      size: 1,
      width: 0,
      value: null,
    },
    {
      type: Types.Primitive.MAP8,
      descriptor: null,
      width: 51,
      size: 54,
      value: [
        {
          type: Types.Primitive.SYM8,
          descriptor: null,
          size: 9,
          width: 7,
          value: 'product',
        },
        {
          type: Types.Primitive.STR8,
          descriptor: null,
          size: 25,
          width: 23,
          value: 'apache-activemq-artemis',
        },
        {
          type: Types.Primitive.SYM8,
          descriptor: null,
          size: 9,
          width: 7,
          value: 'version',
        },
        {
          type: Types.Primitive.STR8,
          descriptor: null,
          size: 8,
          width: 6,
          value: '2.31.2',
        },
      ],
    },
  ],
};
const TransferBuffer = [
  0x00, 0x53, 0x14, 0xc0, 0x08, 0x05, 0x43, 0x43, 0xa0, 0x01, 0x00, 0x43, 0x42, 0x00, 0x53, 0x70,
  0xd0, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x40, 0x40, 0x40, 0x00, 0x53, 0x73, 0xd0,
  0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x03, 0xa1, 0x24, 0x64, 0x31, 0x64, 0x37, 0x36, 0x38,
  0x61, 0x33, 0x2d, 0x30, 0x36, 0x31, 0x34, 0x2d, 0x34, 0x65, 0x31, 0x30, 0x2d, 0x39, 0x66, 0x39,
  0x34, 0x2d, 0x33, 0x30, 0x33, 0x32, 0x37, 0x63, 0x38, 0x39, 0x36, 0x31, 0x34, 0x63, 0x40, 0xa1,
  0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x00,
  0x53, 0x74, 0xd1, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x06, 0xa1, 0x07, 0x6a, 0x6f, 0x62,
  0x54, 0x79, 0x70, 0x65, 0xa1, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0xa1, 0x08, 0x64, 0x65,
  0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0xa1, 0x20, 0x65, 0x61, 0x63, 0x34, 0x65, 0x63, 0x35, 0x65,
  0x35, 0x39, 0x66, 0x65, 0x33, 0x31, 0x33, 0x31, 0x36, 0x34, 0x62, 0x65, 0x30, 0x37, 0x36, 0x35,
  0x66, 0x33, 0x62, 0x61, 0x63, 0x35, 0x37, 0x63, 0xa1, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
  0x74, 0x65, 0x49, 0x64, 0xa1, 0x12, 0x4e, 0x65, 0x74, 0x69, 0x6e, 0x20, 0x49, 0x43, 0x4d, 0x50,
  0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x00, 0x53, 0x77, 0xb1, 0x00, 0x00, 0x03, 0xfc,
  0x7b, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x3a, 0x31, 0x37, 0x31,
  0x35, 0x35, 0x32, 0x37, 0x38, 0x30, 0x37, 0x38, 0x34, 0x35, 0x2c, 0x22, 0x6c, 0x6f, 0x63, 0x61,
  0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x5b, 0x22, 0x4d, 0x79, 0x74, 0x72, 0x61, 0x22, 0x2c, 0x22,
  0x4c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x6f, 0x22, 0x5d, 0x2c, 0x22, 0x6c,
  0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3a, 0x22, 0x64, 0x37, 0x62, 0x35,
  0x38, 0x33, 0x65, 0x36, 0x2d, 0x32, 0x31, 0x61, 0x36, 0x2d, 0x35, 0x32, 0x32, 0x61, 0x2d, 0x39,
  0x33, 0x36, 0x35, 0x2d, 0x62, 0x63, 0x66, 0x31, 0x63, 0x37, 0x66, 0x33, 0x38, 0x65, 0x32, 0x35,
  0x22, 0x2c, 0x22, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a,
  0x22, 0x4e, 0x65, 0x74, 0x69, 0x6e, 0x20, 0x49, 0x43, 0x4d, 0x50, 0x20, 0x44, 0x65, 0x66, 0x61,
  0x75, 0x6c, 0x74, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x2c, 0x22, 0x64,
  0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x3a, 0x22, 0x65, 0x61, 0x63, 0x34, 0x65, 0x63,
  0x35, 0x65, 0x35, 0x39, 0x66, 0x65, 0x33, 0x31, 0x33, 0x31, 0x36, 0x34, 0x62, 0x65, 0x30, 0x37,
  0x36, 0x35, 0x66, 0x33, 0x62, 0x61, 0x63, 0x35, 0x37, 0x63, 0x22, 0x2c, 0x22, 0x65, 0x6e, 0x74,
  0x69, 0x74, 0x79, 0x22, 0x3a, 0x22, 0x31, 0x37, 0x64, 0x36, 0x31, 0x31, 0x31, 0x30, 0x2d, 0x63,
  0x30, 0x32, 0x65, 0x2d, 0x35, 0x35, 0x63, 0x33, 0x2d, 0x39, 0x66, 0x64, 0x35, 0x2d, 0x61, 0x63,
  0x30, 0x37, 0x61, 0x38, 0x66, 0x37, 0x35, 0x35, 0x65, 0x65, 0x22, 0x2c, 0x22, 0x65, 0x6e, 0x74,
  0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x6e, 0x65, 0x74, 0x69, 0x6e, 0x2d,
  0x64, 0x73, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x2c, 0x22, 0x6f, 0x72, 0x69, 0x67, 0x69,
  0x6e, 0x22, 0x3a, 0x22, 0x31, 0x30, 0x2e, 0x31, 0x30, 0x2e, 0x32, 0x30, 0x2e, 0x32, 0x33, 0x35,
  0x22, 0x2c, 0x22, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x3a, 0x22,
  0x4e, 0x65, 0x74, 0x69, 0x6e, 0x20, 0x49, 0x43, 0x4d, 0x50, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75,
  0x6c, 0x74, 0x22, 0x2c, 0x22, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
  0x3a, 0x7b, 0x22, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3a,
  0x7b, 0x22, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x22, 0x4f, 0x6b, 0x22, 0x2c, 0x22, 0x64,
  0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
  0x22, 0x2c, 0x22, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x22, 0x4f, 0x6b,
  0x22, 0x2c, 0x22, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a,
  0x22, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x22, 0x2c, 0x22, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
  0x74, 0x79, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x3a,
  0x22, 0x67, 0x6f, 0x6f, 0x64, 0x22, 0x2c, 0x22, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54,
  0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x67, 0x6f, 0x6f, 0x64, 0x22, 0x2c, 0x22, 0x74, 0x65, 0x78,
  0x74, 0x22, 0x3a, 0x22, 0x22, 0x2c, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
  0x22, 0x3a, 0x31, 0x37, 0x31, 0x35, 0x35, 0x32, 0x37, 0x38, 0x30, 0x37, 0x38, 0x35, 0x30, 0x2c,
  0x22, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x6e, 0x65,
  0x74, 0x69, 0x6e, 0x2d, 0x64, 0x73, 0x2d, 0x7a, 0x61, 0x76, 0x6f, 0x64, 0x22, 0x7d, 0x2c, 0x22,
  0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
  0x6e, 0x22, 0x3a, 0x7b, 0x22, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x22, 0x49, 0x43, 0x4d,
  0x50, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x2c, 0x22, 0x64, 0x61, 0x74, 0x61,
  0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x22, 0x2c, 0x22,
  0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x22, 0x49, 0x43, 0x4d, 0x50, 0x5f,
  0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x2c, 0x22, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74,
  0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x22, 0x2c,
  0x22, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x2d, 0x31, 0x2c, 0x22, 0x71,
  0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x22, 0x67, 0x6f, 0x6f, 0x64, 0x22, 0x2c, 0x22,
  0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x67, 0x6f,
  0x6f, 0x64, 0x22, 0x2c, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3a, 0x22, 0x22, 0x2c, 0x22, 0x74,
  0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x3a, 0x31, 0x37, 0x31, 0x35, 0x33, 0x36,
  0x37, 0x30, 0x34, 0x35, 0x38, 0x33, 0x39, 0x2c, 0x22, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54,
  0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x6e, 0x65, 0x74, 0x69, 0x6e, 0x2d, 0x64, 0x73, 0x2d, 0x7a,
  0x61, 0x76, 0x6f, 0x64, 0x22, 0x7d, 0x2c, 0x22, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64,
  0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x7b, 0x22, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a,
  0x22, 0x31, 0x30, 0x2e, 0x31, 0x30, 0x2e, 0x32, 0x30, 0x2e, 0x32, 0x33, 0x35, 0x22, 0x2c, 0x22,
  0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x53, 0x54, 0x52, 0x49, 0x4e,
  0x47, 0x22, 0x2c, 0x22, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x22, 0x31,
  0x30, 0x2e, 0x31, 0x30, 0x2e, 0x32, 0x30, 0x2e, 0x32, 0x33, 0x35, 0x22, 0x2c, 0x22, 0x72, 0x61,
  0x77, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x53, 0x54, 0x52, 0x49,
  0x4e, 0x47, 0x22, 0x2c, 0x22, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x2d,
  0x31, 0x2c, 0x22, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x22, 0x67, 0x6f, 0x6f,
  0x64, 0x22, 0x2c, 0x22, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22,
  0x3a, 0x22, 0x67, 0x6f, 0x6f, 0x64, 0x22, 0x2c, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3a, 0x22,
  0x22, 0x2c, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x3a, 0x31, 0x37,
  0x31, 0x35, 0x33, 0x36, 0x37, 0x30, 0x34, 0x35, 0x38, 0x34, 0x33, 0x2c, 0x22, 0x6f, 0x72, 0x69,
  0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x6e, 0x65, 0x74, 0x69, 0x6e, 0x2d,
  0x64, 0x73, 0x2d, 0x7a, 0x61, 0x76, 0x6f, 0x64, 0x22, 0x7d, 0x7d, 0x7d,
];
const TransferDecodedArguments = {
  type: Types.Primitive.LIST8,
  descriptor: {
    type: Types.Primitive.SMALL_ULONG,
    descriptor: null,
    size: 2,
    width: 1,
    value: 20,
  },
  width: 7,
  size: 10,
  value: [
    {
      type: Types.Primitive.UNIT0,
      descriptor: null,
      size: 1,
      width: 0,
      value: 0,
    },
    {
      type: Types.Primitive.UNIT0,
      descriptor: null,
      size: 1,
      width: 0,
      value: 0,
    },
    {
      type: Types.Primitive.VBIN8,
      descriptor: null,
      size: 3,
      width: 1,
      value: Buffer.from(new Uint8Array([0])),
    },
    {
      type: Types.Primitive.UNIT0,
      descriptor: null,
      size: 1,
      width: 0,
      value: 0,
    },
    {
      type: Types.Primitive.FALSE,
      descriptor: null,
      size: 1,
      width: 0,
      value: false,
    },
  ],
};
const TransferDecodedHeader = {
  type: 208,
  descriptor: {
    type: Types.Primitive.SMALL_ULONG,
    descriptor: null,
    size: 2,
    width: 1,
    value: 112,
  },
  width: 3,
  size: 12,
  value: [
    {
      type: Types.Primitive.NULL,
      descriptor: null,
      size: 1,
      width: 0,
      value: null,
    },
    {
      type: Types.Primitive.NULL,
      descriptor: null,
      size: 1,
      width: 0,
      value: null,
    },
    {
      type: Types.Primitive.NULL,
      descriptor: null,
      size: 1,
      width: 0,
      value: null,
    },
  ],
};
const TransferDecodedMessageProperties = {
  type: Types.Primitive.LIST32,
  descriptor: {
    type: Types.Primitive.SMALL_ULONG,
    descriptor: null,
    size: 2,
    width: 1,
    value: 115,
  },
  width: 55,
  size: 64,
  value: [
    {
      type: Types.Primitive.STR8,
      descriptor: null,
      size: 38,
      width: 36,
      value: 'd1d768a3-0614-4e10-9f94-30327c89614c',
    },
    {
      type: Types.Primitive.NULL,
      descriptor: null,
      size: 1,
      width: 0,
      value: null,
    },
    {
      type: Types.Primitive.STR8,
      descriptor: null,
      size: 16,
      width: 14,
      value: 'stream.devices',
    },
  ],
};
const TransferDecodedApplicationProperties = {
  type: Types.Primitive.MAP32,
  descriptor: {
    type: Types.Primitive.SMALL_ULONG,
    descriptor: null,
    size: 2,
    width: 1,
    value: 116,
  },
  width: 93,
  size: 102,
  value: [
    {
      type: Types.Primitive.STR8,
      descriptor: null,
      size: 9,
      width: 7,
      value: 'jobType',
    },
    {
      type: Types.Primitive.STR8,
      descriptor: null,
      size: 8,
      width: 6,
      value: 'device',
    },
    {
      type: Types.Primitive.STR8,
      descriptor: null,
      size: 10,
      width: 8,
      value: 'deviceId',
    },
    {
      type: Types.Primitive.STR8,
      descriptor: null,
      size: 34,
      width: 32,
      value: 'eac4ec5e59fe313164be0765f3bac57c',
    },
    {
      type: Types.Primitive.STR8,
      descriptor: null,
      size: 12,
      width: 10,
      value: 'templateId',
    },
    {
      type: Types.Primitive.STR8,
      descriptor: null,
      size: 20,
      width: 18,
      value: 'Netin ICMP Default',
    },
  ],
};
const TransferDecodedValue = {
  type: Types.Primitive.STR32,
  descriptor: {
    type: Types.Primitive.SMALL_ULONG,
    descriptor: null,
    size: 2,
    width: 1,
    value: 119,
  },
  size: 1025,
  width: 1020,
  value:
    '{"timestamp":1715527807845,"location":["Mytra","Laboratorio"],"locationId":"d7b583e6-21a6-522a-9365-bcf1c7f38e25","description":"Netin ICMP Default template","deviceId":"eac4ec5e59fe313164be0765f3bac57c","entity":"17d61110-c02e-55c3-9fd5-ac07a8f755ee","entityType":"netin-ds-agent","origin":"10.10.20.235","templateId":"Netin ICMP Default","deviceInfo":{"deviceState":{"value":"Ok","dataType":"STRING","rawValue":"Ok","rawDataType":"STRING","severity":0,"quality":"good","qualityType":"good","text":"","timestamp":1715527807850,"originType":"netin-ds-zavod"},"deviceDescription":{"value":"ICMP_Default","dataType":"STRING","rawValue":"ICMP_Default","rawDataType":"STRING","severity":-1,"quality":"good","qualityType":"good","text":"","timestamp":1715367045839,"originType":"netin-ds-zavod"},"deviceAddress":{"value":"10.10.20.235","dataType":"STRING","rawValue":"10.10.20.235","rawDataType":"STRING","severity":-1,"quality":"good","qualityType":"good","text":"","timestamp":1715367045843,"originType":"netin-ds-zavod"}}}',
};
describe('#AMQP #Protocol #Types #Deserializer', () => {
  describe('#Happy Path', () => {
    it(`Should be able to decode a SASL Mechanisms buffer`, () => {
      const constructor = Constructors.decode(Buffer.from(SASLMechanismsBuffer));
      expect(constructor).toEqual(SASLMechanismsDecoded);
    });
    it(`Should be able to decode a SASL Init buffer`, () => {
      const constructor = Constructors.decode(Buffer.from(SASLInitBuffer));
      expect(constructor).toEqual(SASLInitDecoded);
    });
    it(`Should be able to decode a Frame Open buffer`, () => {
      const constructor = Constructors.decode(Buffer.from(FrameOpenBuffer));
      expect(constructor).toEqual(FrameOpenDecoded);
    });
    it(`Should be able to decode a Frame Begin buffer`, () => {
      const args = Constructors.decode(Buffer.from(TransferBuffer));
      expect(args).toEqual(TransferDecodedArguments);
      const headerBuffer = Buffer.from(TransferBuffer).subarray(args.size + 3);
      const header = Constructors.decode(headerBuffer);
      expect(header).toEqual(TransferDecodedHeader);
      const messagePropertiesBuffer = Buffer.from(TransferBuffer).subarray(
        args.size + header.size + 6
      );
      const messageProperties = Constructors.decode(messagePropertiesBuffer);
      expect(messageProperties).toEqual(TransferDecodedMessageProperties);
      const applicationPropertiesBuffer = Buffer.from(TransferBuffer).subarray(
        args.size + header.size + messageProperties.size + 9
      );
      const applicationProperties = Constructors.decode(applicationPropertiesBuffer);
      expect(applicationProperties).toEqual(TransferDecodedApplicationProperties);
      const valueBuffer = Buffer.from(TransferBuffer).subarray(
        args.size + header.size + messageProperties.size + applicationProperties.size + 12
      );
      const value = Constructors.decode(valueBuffer);
      expect(value).toEqual(TransferDecodedValue);
    });
    it(`Should return the correct count of number of data width for a fixed width primitive`, () => {
      // @ts-expect-error - Testing private method
      const count = Constructors.getCount(
        Buffer.from([0x00, 0x00, 0x00, 0x00]),
        Types.Subcategory.FIXED_EIGHT
      );
      expect(count).toBe(1);
    });
    it(`Should return the correct fixed data width for all the options`, () => {
      // @ts-expect-error - Testing private method
      expect(Constructors.getFixedDataWidth(Types.Subcategory.EMPTY)).toBe(0);
      // @ts-expect-error - Testing private method
      expect(Constructors.getFixedDataWidth(Types.Subcategory.FIXED_ONE)).toBe(1);
      // @ts-expect-error - Testing private method
      expect(Constructors.getFixedDataWidth(Types.Subcategory.FIXED_TWO)).toBe(2);
      // @ts-expect-error - Testing private method
      expect(Constructors.getFixedDataWidth(Types.Subcategory.FIXED_FOUR)).toBe(4);
      // @ts-expect-error - Testing private method
      expect(Constructors.getFixedDataWidth(Types.Subcategory.FIXED_EIGHT)).toBe(8);
      // @ts-expect-error - Testing private method
      expect(Constructors.getFixedDataWidth(Types.Subcategory.FIXED_SIXTEEN)).toBe(16);
    });
    it('Should parse properly all the different types of primitives', () => {
      expect(Parser.parse(Buffer.from([]), Types.Primitive.NULL)).toBe(null);
      expect(Parser.parse(Buffer.from([0x41]), Types.Primitive.BOOLEAN)).toBe(true);
      expect(Parser.parse(Buffer.from([0x42]), Types.Primitive.BOOLEAN)).toBe(false);
      expect(Parser.parse(Buffer.from([]), Types.Primitive.TRUE)).toBe(true);
      expect(Parser.parse(Buffer.from([]), Types.Primitive.FALSE)).toBe(false);
      expect(Parser.parse(Buffer.from([0x00]), Types.Primitive.UBYTE)).toBe(0);
      expect(Parser.parse(Buffer.from([0x01]), Types.Primitive.SMALL_UINT)).toBe(1);
      expect(Parser.parse(Buffer.from([0x7f]), Types.Primitive.SMALL_ULONG)).toBe(127);
      expect(Parser.parse(Buffer.from([0x00, 0x0a]), Types.Primitive.USHORT)).toBe(10);
      expect(Parser.parse(Buffer.from([0x00, 0x00, 0x00, 0x0a]), Types.Primitive.UINT)).toBe(10);
      expect(
        Parser.parse(
          Buffer.from([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa]),
          Types.Primitive.ULONG
        )
      ).toBe(BigInt(10));
      expect(Parser.parse(Buffer.from([]), Types.Primitive.UNIT0)).toBe(0);
      expect(Parser.parse(Buffer.from([]), Types.Primitive.ULONG0)).toBe(0);
      expect(Parser.parse(Buffer.from([0x80]), Types.Primitive.BYTE)).toBe(-128);
      expect(Parser.parse(Buffer.from([0x80]), Types.Primitive.SMALL_INT)).toBe(-128);
      expect(Parser.parse(Buffer.from([0x80]), Types.Primitive.SMALL_LONG)).toBe(-128);
      expect(Parser.parse(Buffer.from([0x80, 0x0]), Types.Primitive.SHORT)).toBe(-32768);
      expect(Parser.parse(Buffer.from([0x80, 0x0, 0x0, 0x0]), Types.Primitive.INT)).toBe(
        -2147483648
      );
      expect(
        Parser.parse(Buffer.from([0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]), Types.Primitive.LONG)
      ).toBe(BigInt(-9223372036854775808));
      expect(() => Parser.parse(Buffer.from([]), Types.Primitive.DECIMAL32)).toThrow(
        `Decimal types are not supported yet.`
      );
      expect(() => Parser.parse(Buffer.from([]), Types.Primitive.DECIMAL64)).toThrow(
        `Decimal types are not supported yet.`
      );
      expect(() => Parser.parse(Buffer.from([]), Types.Primitive.DECIMAL128)).toThrow(
        `Decimal types are not supported yet.`
      );
      expect(Parser.parse(Buffer.from([0x00, 0x02, 0x10, 0x00]), Types.Primitive.CHAR)).toBe('က');
      expect(
        Parser.parse(
          Buffer.from([0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
          Types.Primitive.TIMESTAMP
        ).toISOString()
      ).toBe(new Date(0).toISOString());
      expect(
        Parser.parse(
          Buffer.from([
            0x7d, 0x80, 0x19, 0x00, 0x61, 0xe4, 0x48, 0x06, 0x86, 0x11, 0x07, 0x64, 0x19, 0x4a,
            0x92, 0x55,
          ]),
          Types.Primitive.UUID
        )
      ).toBe('7d801900-61e4-4806-8611-0764194a9255');
      expect(Parser.parse(Buffer.from([0x00, 0x00, 0x00, 0x00]), Types.Primitive.VBIN8)).toEqual(
        Buffer.from([0x00, 0x00, 0x00, 0x00])
      );
      expect(Parser.parse(Buffer.from([0x00, 0x00, 0x00, 0x00]), Types.Primitive.VBIN32)).toEqual(
        Buffer.from([0x00, 0x00, 0x00, 0x00])
      );
      expect(Parser.parse(Buffer.from([0x68, 0x6f, 0x6c, 0x61]), Types.Primitive.STR8)).toBe(
        'hola'
      );
      expect(Parser.parse(Buffer.from([0x68, 0x6f, 0x6c, 0x61]), Types.Primitive.STR32)).toBe(
        'hola'
      );
      expect(Parser.parse(Buffer.from([0x68, 0x6f, 0x6c, 0x61]), Types.Primitive.SYM8)).toBe(
        'hola'
      );
      expect(Parser.parse(Buffer.from([0x68, 0x6f, 0x6c, 0x61]), Types.Primitive.SYM32)).toBe(
        'hola'
      );
      expect(Parser.parse(Buffer.from([0x00, 0x00, 0x00, 0x00]), Types.Primitive.LIST0)).toEqual(
        []
      );
      expect(() =>
        Parser.parse(Buffer.from([0x00, 0x00, 0x00, 0x00]), Types.Primitive.LIST8)
      ).toThrow('Not parsable code [0xc0]/[LIST8], parsing failed');
      // FLOAT and DOUBLE
      const originalFloat = 3.14;
      const originalDouble = 2.718281828459045;
      const floatBuffer = Buffer.alloc(4);
      const doubleBuffer = Buffer.alloc(8);
      floatBuffer.writeFloatBE(originalFloat);
      doubleBuffer.writeDoubleBE(originalDouble);
      expect(Parser.parse(floatBuffer, Types.Primitive.FLOAT)).toBe(3.140000104904175);
      expect(Parser.parse(doubleBuffer, Types.Primitive.DOUBLE)).toBe(originalDouble);
    });
  });
  describe('#Sad Path', () => {
    it(`Should fail when trying to decode an invalid buffer`, () => {
      expect(() => Constructors.decode(Buffer.from([]))).toThrow(
        'Invalid buffer, expected a non-empty buffer but got an empty buffer'
      );
      // @ts-expect-error - Testing invalid input
      expect(() => Constructors.decode(undefined)).toThrow(
        'Invalid buffer, expected a non-empty buffer but got [undefined]'
      );
      // @ts-expect-error - Testing invalid input
      expect(() => Constructors.decode(null)).toThrow(
        'Invalid buffer, expected a non-empty buffer but got [object]'
      );
    });
    it(`Should fail when trying to create a constructor with an invalid type`, () => {
      expect(() => Constructors.decode(Buffer.from([0x10]))).toThrow(
        'Invalid primitive, expected one of supported primitive but got [undefined]/[1]'
      );
    });
    it(`Should fail if try to decode as an descriptor a non descriptor primitive`, () => {
      expect(
        // @ts-expect-error - Testing invalid input
        () => Constructors.descriptor(Buffer.from([]), Types.Primitive.VBIN32)
      ).toThrow('Invalid primitive, expected a DESCRIPTOR but got [VARIABLE_FOUR]/[b]');
    });
    it(`Should fail if try to decode as an fixedWidth a non fixedWidth primitive`, () => {
      expect(
        // @ts-expect-error - Testing invalid input
        () => Constructors.fixedWidth(Buffer.from([]), Types.Primitive.VBIN32)
      ).toThrow('Invalid primitive, expected a fixed width but got [VARIABLE_FOUR]/[b]');
    });
    it(`Should fail if try to decode as an variableWidth a non variableWidth primitive`, () => {
      expect(
        // @ts-expect-error - Testing invalid input
        () => Constructors.variableWidth(Buffer.from([]), Types.Primitive.FIXED_ONE)
      ).toThrow(
        'Invalid primitive, expected VARIABLE_ONE or VARIABLE_FOUR but got [DESCRIPTOR]/[0]'
      );
    });
    it(`Should fail if try to decode as an compound a non compound primitive`, () => {
      expect(
        // @ts-expect-error - Testing invalid input
        () => Constructors.compound(Buffer.from([]), Types.Primitive.FIXED_ONE)
      ).toThrow(
        'Invalid primitive, expected COMPOUND_ONE or COMPOUND_FOUR but got [DESCRIPTOR]/[0]'
      );
    });
    it(`Should fail if try to decode as an array a non array primitive`, () => {
      expect(
        // @ts-expect-error - Testing invalid input
        () => Constructors.array(Buffer.from([]), Types.Primitive.FIXED_ONE)
      ).toThrow('Invalid primitive, expected ARRAY_ONE or ARRAY_FOUR but got [DESCRIPTOR]/[0]');
    });
    it(`Should fail when try to get the fixed data width of an invalid subtype`, () => {
      expect(
        // @ts-expect-error - Testing invalid input
        () => Constructors.getFixedDataWidth(Buffer.from([]), Types.Subcategory.VARIABLE_ONE)
      ).toThrow('Category detected as fixed width but no size was found');
    });
    it(`Should fail when try to get the variable data width of an invalid subtype`, () => {
      expect(
        // @ts-expect-error - Testing invalid input
        () => Constructors.getVariableDataWidth(Buffer.from([]), Types.Subcategory.FIXED_ONE)
      ).toThrow('Category detected as variable width but no size was found');
    });
  });
});

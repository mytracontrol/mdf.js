@startuml sequences-proxy

!pragma teoz true

skinparam sequenceArrowThickness 2
skinparam roundcorner 20
skinparam maxmessagesize 200


skinparam ParticipantPadding 30
skinparam BoxPadding 30
skinparam SequenceBoxBackgroundColor AliceBlue
skinparam ActorBorderColor SaddleBrown
skinparam sequenceMessageAlign left

box Upstream
participant "Producer" as UpstreamProducer << (C,#ADD1B2) >> order 0
participant "Adapter" as UpstreamProducerAdapter << (C,#ADD1B2) >> order 1
end box

participant "Tansport" as UpstreamTransport << (S, LightBlue) >> order 2

box "Proxy"
participant "Adapter" as ProxyConsumerAdapter << (C,#ADD1B2) >> order 3
participant "Consumer" as ProxyConsumer << (C,#ADD1B2) >> order 4
box JobExecution #LightCyan
participant ProxyJobHandler << (C,#ADD1B2) >> order 5
end box
participant "Proxy" as Proxy << (C,#ADD1B2) >> order 6
participant "Producer" as ProxyProducer << (C,#ADD1B2) >> order 7
participant "Adapter" as ProxyProducerAdapter << (C,#ADD1B2) >> order 8
end box

participant "Tansport" as DownstreamTransport << (S, LightBlue) >> order 9

box Downstream
participant "Adapter" as DownstreamConsumerAdapter << (C,#ADD1B2) >> order 10
participant "Consumer" as DownstreamConsumer << (C,#ADD1B2) >> order 11
end box

box JobExecution #LightCyan
participant DownstreamJobHandler << (C,#ADD1B2) >> order 12
end box

participant "Lower Layer" as Lower << (S, LightBlue) >> order 13


activate UpstreamProducer
UpstreamProducer -> UpstreamProducerAdapter : publish(command)
activate UpstreamProducerAdapter
UpstreamProducerAdapter -> UpstreamTransport : publish(command)
UpstreamTransport -> ProxyConsumerAdapter: execute(command)
UpstreamTransport -> UpstreamProducerAdapter : resolves()
activate ProxyConsumerAdapter
& ProxyConsumerAdapter -> ProxyConsumer : handler(command, done)
activate ProxyConsumer
create ProxyJobHandler
ProxyConsumer --> ProxyJobHandler : subscribe("done")
activate ProxyJobHandler
& UpstreamProducerAdapter -> UpstreamProducer : resolves()
ProxyConsumer --> Proxy : emit("command", ProxyJobHandler)
activate Proxy
& {UpstreamStart} UpstreamProducer -> UpstreamProducerAdapter : subscribe(handler)
UpstreamProducerAdapter -> UpstreamTransport : subscribe("response")
& Proxy -> ProxyProducer : publish(command)
activate ProxyProducer
ProxyProducer -> ProxyProducerAdapter : publish(command)
activate ProxyProducerAdapter
ProxyProducerAdapter -> DownstreamTransport : publish(command)
DownstreamTransport -> DownstreamConsumerAdapter: execute(command)
DownstreamTransport -> ProxyProducerAdapter : resolves()
activate DownstreamConsumerAdapter
& DownstreamConsumerAdapter -> DownstreamConsumer : handler(command, done)
activate DownstreamConsumer
create DownstreamJobHandler
DownstreamConsumer --> DownstreamJobHandler : subscribe("done")
activate DownstreamJobHandler
& ProxyProducerAdapter -> ProxyProducer : resolves()
DownstreamConsumer --> Lower : emit("command", ProxyJobHandler)
activate Lower
& {ProxyStart} ProxyProducer -> ProxyProducerAdapter : subscribe(handler)
ProxyProducerAdapter -> DownstreamTransport : subscribe("response")
Lower -> DownstreamJobHandler : done()
deactivate Lower
DownstreamJobHandler --> DownstreamConsumer : emit("done")
deactivate DownstreamJobHandler
destroy DownstreamJobHandler
DownstreamConsumer -> DownstreamConsumerAdapter : done(response)
deactivate DownstreamConsumer
DownstreamConsumerAdapter -> DownstreamTransport : done(response)
deactivate DownstreamConsumerAdapter
DownstreamTransport --> ProxyProducerAdapter : emit("response", response)
ProxyProducerAdapter -> ProxyProducer : handler("response")
{ProxyEnd} ProxyProducer --> ProxyProducer : onTimeOut(getDelay())
ProxyProducer -> ProxyProducerAdapter : unsubscribe()
deactivate ProxyProducerAdapter
ProxyProducer -> Proxy : resolve(responses)
{ProxyStart} <-> {ProxyEnd} : getDelay(command)
deactivate ProxyProducer
Proxy -> ProxyJobHandler : done()
deactivate Proxy
ProxyJobHandler --> ProxyConsumer : emit("done")
deactivate ProxyJobHandler
destroy ProxyJobHandler
ProxyConsumer -> ProxyConsumerAdapter : done(response)
deactivate ProxyConsumer
ProxyConsumerAdapter -> UpstreamTransport : done(response)
deactivate ProxyConsumerAdapter
UpstreamTransport --> UpstreamProducerAdapter : emit("response", response)
UpstreamProducerAdapter -> UpstreamProducer : handler("response")
UpstreamTransport --> UpstreamProducerAdapter : emit("response", response)
UpstreamProducerAdapter -> UpstreamProducer : handler("response")
{UpstreamEnd} UpstreamProducer --> UpstreamProducer : onTimeOut(getDelay())
UpstreamProducer -> UpstreamProducerAdapter : unsubscribe()
deactivate UpstreamProducerAdapter
{UpstreamStart} <-> {UpstreamEnd} : getDelay(command)
deactivate UpstreamProducer

@enduml
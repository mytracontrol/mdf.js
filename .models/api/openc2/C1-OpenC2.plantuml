@startuml C1-OpenC2

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

skinparam linetype ortho
skinparam nodesep 100
skinparam ranksep 100

AddElementTag("main", $bgColor="#0070C0", $fontColor="#FFFFFF", $legendText="Main component")
AddElementTag("reused", $bgColor="#7030A0", $fontColor="#FFFFFF", $legendText="Interface componet, used in more schemas")
AddElementTag("health", $borderColor="#FF0000", $legendText="Implement Health Component interface")

AddRelTag("DottedLine", $lineStyle = DottedLine(), $legendText="Async event")

'###################################################################################################
'External components and systems
System_Ext("UPPER_LAYER", "Upper layer", "Use the producer and consumer interface to perform command and control operations", $tags=reused)
Component_Ext("JOBHANDLER1", "JobHandler", "Job", "Job handler, emitted by the consumer and revolved by the upper layers")
Component_Ext("JOBHANDLER2", "JobHandler", "Job", "Job handler, emitted by the consumer and revolved by the upper layers")
Component_Ext("JOBHANDLER3", "JobHandler", "Job", "Job handler, emitted by the consumer and revolved by the upper layers")
'###################################################################################################
'CONSUMER
Enterprise_Boundary(OPENC2, "OpenC2 Ecosystem") {
    Container("CONSUMER1", "Consumer", "Main", "Manage the incoming commands, emitting jobs that should be resolved by the upper layers", $tags=main+health)
    Container("CONSUMER2", "Consumer", "Main", "Manage the incoming commands, emitting jobs that should be resolved by the upper layers", $tags=main+health)
    Container("CONSUMER3", "Consumer", "Main", "Manage the incoming commands, emitting jobs that should be resolved by the upper layers", $tags=main+health)
    Container("PRODUCER", "Producer", "Main", "Allow upper layers to perform commands against the consumers that participate in the system", $tags=main+health)
    SystemQueue("TRANSPORT", "Transport", "Transport system used to interconnect the nodes that participate in the system (MQTT, Redis, HTTP ...)", $tags=reused)
}

Rel_D(UPPER_LAYER, PRODUCER, "command")
Rel_U(PRODUCER, UPPER_LAYER, "responses")


Rel_D(PRODUCER, TRANSPORT, "OC2 command")
Rel_U(TRANSPORT, PRODUCER, "OC2 respond")

Rel_D(TRANSPORT, CONSUMER1, "OC2 command")
Rel_U(CONSUMER1, TRANSPORT, "OC2 respond")
Rel_D(CONSUMER1, JOBHANDLER1, "emit", $tags="DottedLine")
Rel_U(JOBHANDLER1, CONSUMER1, "done")

Rel_D(TRANSPORT, CONSUMER2, "OC2 command")
Rel_U(CONSUMER2, TRANSPORT, "OC2 respond")
Rel_D(CONSUMER2, JOBHANDLER2, "emit", $tags="DottedLine")
Rel_U(JOBHANDLER2, CONSUMER2, "done")

Rel_D(TRANSPORT, CONSUMER3, "OC2 command")
Rel_U(CONSUMER3, TRANSPORT, "OC2 respond")
Rel_D(CONSUMER3, JOBHANDLER3, "emit", $tags="DottedLine")
Rel_U(JOBHANDLER3, CONSUMER3, "done")

SHOW_LEGEND()
@enduml